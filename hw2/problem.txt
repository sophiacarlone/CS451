You need to solve the following two problems in a programming language of your choice.  However, if you use C++, you can use my code.

1. My free cell problem
2. Parking lot problem

For each problem, you need to define:

1. State
2. Initial State
3. Goal Test
4. Successor Function
5. 2 Heuristic Functions

For each of the problems you must write an A* algorithm that uses the problem definition and tries to solve the problem.  For each problem, I want you to define two admissible non-trivial heuristics, one simple one, and another one that dominates the first one.  If you use my code, the only thing you need to do is to define the heuristics.  The simplest is to make a separate program for each heuristic.

For each problem, you must turn in the following:

1. Your code.
2. An English description of state, initial state, goal test, successor function and 2 heuristics.
3. Program output of the solutions to the test problems below.  For each problem there will be two outputs, one for each heuristic.  The output should show the solution to the problem, the path cost of the solution, and the number of nodes that A* expanded.


Here is a description of each of the problems:

My free cell problem:  The problem contains cards numbered 1 to n, one card for each number.
A state of the problem contains the following:
 - A counter n.
 - Several piles of cards, each pile contains 0 to n cards, with each card appearing exactly once.
The successor function will do one of the following things:
  - Take the block on top of some pile, and place it on top of another pile, such that it is placed directly on a smaller numbered block.
  - Take the block on top of some pile and place it on an empty pile.
  - Take the block on top of some pile and throw it away, assuming that the number on the block matches the counter, then decrement the counter.
The problem is solved when the counter is 0, equivalently when there are no blocks left. 
Any valid state could be an initial configuration.


Parking lot problem:  You have an nxn grid.  There are several cars in the grid, each car occupies two or more contiguous positions in the grid, either horizontally or vertically.  The first car is yours.  There is a specific position in the grid considered to be the goal.  On each step, you can move some car (either your car or one of the others) forward one space or backward one space (but not sideways), as long as no other car is there.  You have won the game when your car touches the finish position.  

Here are the test cases:

Free cell 1:  The counter is 10.  There are three piles.  Two are empty, and one is [4,5,1,2,6,7,10,9,3,8], listed from top to bottom.
Free cell 2:  The counter is 12.  The piles are [2,11,4], [3,12,6,1], [7,8,9] and [10,5], all listed from top to bottom.
Parking lot 1:  The grid is 5x5.  Your car is at [(1,2)(2,2)].  The other cars are at [(4,5),(5,5)], [(4,1),(4,2),(4,3)] and [(2,4),(2,5)].  You want to get your car to position (5,2).
Parking lot 2:  The grid is 5x5.  Your car is at [(3,2),(3,3)].  The other cars are at [(1,1),(1,2)], [(1,4),(1,5)], [(2,1),(3,1)], [(1,3),(2,3)], [(2,5),(3,5)] and [(4,5),(5,5)].  You need to get your car to position (3,5). 